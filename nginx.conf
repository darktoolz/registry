daemon off;
user nginx;
worker_processes auto;
pcre_jit on;
pid /run/nginx.pid;
error_log stderr warn;

env ACCOUNT_KEY;
env DOMAINS;
env DIR;
env STAGING;
env EXPIRE_DAYS;
env TARGET;

env BASIC_USER;
env BASIC_PASS;
env BASIC_SALT;

include /etc/nginx/modules/*.conf;
events {}

http {
	include       mime.types;
	default_type  application/octet-stream;
  resolver 127.0.0.11 ipv6=off;
  sendfile on;
  tcp_nopush on;
  server_tokens off;
  keepalive_timeout  65;
  chunked_transfer_encoding on;
  lua_need_request_body on;
  access_log /dev/null;

  lua_code_cache on;
  lua_shared_dict ip 1m;
  lua_shared_dict acme 16m;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 2;

  upstream registry {
    server registry:5000;
  }
  map $http_x_forwarded_proto $forward_scheme {
    default $http_x_forwarded_proto;
    '' $scheme;
  }

  init_by_lua_block {
    require("resty.acme.autossl").init(require('autossl'):config())
  }
  init_worker_by_lua_block {
    require("resty.acme.autossl").init_worker()
  }
  server {
    listen 80;
		listen 443 ssl default_server;
    server_name _;
    client_max_body_size 0;
    chunked_transfer_encoding on;

    location /.well-known { content_by_lua_block {
      require("resty.acme.autossl").serve_http_challenge()
    }}
    location = /favicon.ico { log_not_found off; }
    location = /ping {
      default_type text/plain;
      log_not_found off;
      access_log /dev/null;
      return 200;
    }

    ssl_certificate /etc/ssl/default.pem;
    ssl_certificate_key /etc/ssl/default.key;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    ssl_certificate_by_lua_block {
      require("resty.acme.autossl").ssl_certificate()
    }

    location /auth {
      content_by_lua_block {
        local env = require('autossl.env')
        local function hexbyte(s) return s and string.format('%.2x', string.byte(s)) or '' end
        local function hex(v) return string.lower(string.gsub(v or '', ".",hexbyte)) end
        local function sha1(pass, salt) return hex(ngx.sha1_bin(string.lower(salt or '') .. (pass or ''))) end
        local user, pass, salt = env.BASIC_USER, env.BASIC_PASS, env.BASIC_SALT or ''
        if ngx.var.http_authorization then
          local http_auth = ngx.decode_base64(string.sub(ngx.var.http_authorization, 7))
          local _, _, login, pwd = string.find(http_auth, "(%w+):(%w+)")
          if login and pwd and (login == user) and (sha1(pwd, salt) == pass) then
            ngx.exit(ngx.OK)
          end
        end
        ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
      }
    }
    location /v2 {
      auth_request /auth;
      default_type application/octet-stream;

      # Do not allow connections from docker 1.5 and earlier
      # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
      if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
        return 404;
      }
      proxy_pass_header Docker-Distribution-Api-Version;
      proxy_pass                          http://registry;
      proxy_set_header  Host              $host;   # required for docker client's sake #was $http_host
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $forward_scheme;
      proxy_set_header Authorization  ""; # see https://github.com/dotcloud/docker-registry/issues/170
      proxy_read_timeout                  10;
      proxy_buffering                     off;
      proxy_http_version 1.1;
      proxy_set_header Connection "Keep-Alive";
      proxy_set_header Proxy-Connection "Keep-Alive";
    }
    location / { try_files $uri $uri/ =404; }
	}
}