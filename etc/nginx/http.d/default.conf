  sendfile on;
  tcp_nopush on;
  server_tokens off;
  keepalive_timeout 65;
  chunked_transfer_encoding on;
  client_max_body_size 0;

  map $http_x_forwarded_proto $forward_scheme {
    default $http_x_forwarded_proto;
    '' $scheme;
  }
  server {
    listen 80;
    listen 443 ssl default_server;
    server_name _;
    access_log /dev/stdout main;
    index index.html;
    include ssl.conf;
    include error.conf;
    include ping.conf;
    include robots.conf;

    include autossl.init.conf;
    include redir80.conf;

    set_by_lua_block $target { return os.getenv('REGISTRY_TARGET') or 'http://registry:5000' }
    location /auth {
      content_by_lua_block {
        local function hexbyte(s) return s and string.format('%.2x', string.byte(s)) or '' end
        local function hex(v) return string.lower(string.gsub(v or '', ".",hexbyte)) end
        local function sha1(pass, salt) return hex(ngx.sha1_bin(string.lower(salt or '') .. (pass or ''))) end
        local user, pass, salt = os.getenv('REGISTRY_USER') or '', os.getenv('REGISTRY_PASS') or '', os.getenv('REGISTRY_SALT') or ''
        if ngx.var.http_authorization then
          local http_auth = ngx.decode_base64(string.sub(ngx.var.http_authorization, 7))
          local _, _, login, pwd = string.find(http_auth, "(%w+):(%w+)")
          if login and pwd and (login == user) and (sha1(pwd, salt) == pass) then
            ngx.exit(ngx.OK)
          end
        end
        ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
      }
    }
    location /v2 {
      auth_request /auth;
      default_type application/octet-stream;

      # Do not allow connections from docker 1.5 and earlier
      # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
      if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
        return 404;
      }
      proxy_pass_header Docker-Distribution-Api-Version;

      proxy_pass                          $target;
      proxy_set_header  Host              $host;   # required for docker client's sake #was $http_host
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $forward_scheme;
      proxy_set_header Authorization  ""; # see https://github.com/dotcloud/docker-registry/issues/170
      proxy_read_timeout                  10;
      proxy_buffering                     on;
      proxy_http_version 1.1;
      proxy_set_header Connection "Keep-Alive";
      proxy_set_header Proxy-Connection "Keep-Alive";
    }
  }
